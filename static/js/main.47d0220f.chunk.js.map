{"version":3,"sources":["components/Card.js","components/CardBack.js","components/Button.js","util/constants.js","util/utility.js","components/AiContainer.js","components/GameSettings.js","components/Score.js","util/api.js","App.js","index.js"],"names":["Card","_ref","power","name","type","react_default","a","createElement","className","CardBack","onClick","Button","children","props","Object","objectWithoutProperties","assign","turnModeEnum","PEOPLE","STARSHIPS","getInitialGameState","numberOfPlayers","numberOfAI","error","turnMode","getRandomTurnMode","data","concat","toConsumableArray","Array","fill","card","score","ai","getStandardCardAttributes","mass","additionalInfo","birth_year","crew","model","randomKey","keys","getRandomInt","min","max","Math","ceil","floor","random","AiContainer","_this","this","setTimeout","action","React","Component","GameSettings","onChange","Fragment","htmlFor","id","value","Score","root","getRandomPeople","randomPersonIndex","axios","get","getRandomStarship","possibleShipIndexes","randomStarshipIndex","length","App","_useState","useState","_useState2","slicedToArray","gameState","setgameState","cardAction","index","then","response","objectSpread","map","playerData","currIndex","catch","err","components_Card","components_Score","components_AiContainer","components_CardBack","components_Button","gameData","areAllCardsTurned","totalNumberOfPlayers","i","winnerIndex","cardPowers","parseInt","highestPower","apply","arr","counts","num","getMapWithArrayElementOccurences","indexOf","getWinnerIndex","singlePlayerData","oldState","components_GameSettings","e","defineProperty","target","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.47d0220f.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Card = ({ power, name, type }) => (\n  <div className=\"card text-center bg-success gameCard\">\n    <div className=\"card-header\">{type}</div>\n    <div className=\"card-body\">\n      <h5 className=\"card-title\">{name}</h5>\n    </div>\n    <div className=\"card-footer text-danger\">\n      <span className=\"badge badge-danger\">{power}</span>\n    </div>\n  </div>\n);\n\nexport default Card;\n","import React from \"react\";\n\nconst CardBack = ({ onClick }) => {\n  return (\n    <div\n      className=\"card text-center bg-secondary gameCard\"\n      onClick={onClick}\n    ></div>\n  );\n};\n\nexport default CardBack;\n","import React from \"react\";\n\nconst Button = ({ children, ...props }) => {\n  return (\n    <button type=\"button\" className=\"btn btn-success dashButton\" {...props}>\n      {children}\n    </button>\n  );\n};\n\nexport default Button;\n","export const turnModeEnum = {\n  PEOPLE: \"people\",\n  STARSHIPS: \"starships\"\n};\n\nexport const minAiProcessingTime = 1000;\nexport const maxAiProcessingTime = 6000;\n","import { turnModeEnum } from \"./constants\";\n\nexport const getInitialGameState = ({ numberOfPlayers, numberOfAI }) => {\n  return {\n    numberOfPlayers,\n    numberOfAI,\n    error: false,\n    turnMode: getRandomTurnMode(),\n    data: [\n      ...Array(numberOfPlayers).fill({\n        card: null,\n        score: 0\n      }),\n      ...Array(numberOfAI).fill({\n        ai: true,\n        card: null,\n        score: 0\n      })\n    ]\n  };\n};\n\nexport const getResetGameStateKeepingScores = oldState => {\n  return {\n    ...oldState,\n    data: oldState.data.map(singlePlayerData => ({\n      ...singlePlayerData,\n      card: null\n    }))\n  };\n};\n\nexport const areAllCardsTurned = (gameData, numberOfPlayers, numberOfAI) => {\n  let areAllCardsTurned = true;\n  const totalNumberOfPlayers = numberOfPlayers + numberOfAI;\n\n  for (let i = 0; i < totalNumberOfPlayers; i++) {\n    if (!gameData[i] || !gameData[i].card) {\n      areAllCardsTurned = false;\n    }\n  }\n\n  return areAllCardsTurned;\n};\n\nexport const getWinnerIndex = (gameData, turnMode) => {\n  let cardPowers = gameData.map(playerData => {\n    const power = parseInt(\n      getStandardCardAttributes(playerData.card, turnMode).power\n    );\n\n    return power || 0;\n  });\n\n  const highestPower = Math.max(...cardPowers);\n  const occurenceMap = getMapWithArrayElementOccurences(cardPowers);\n\n  // if there are 2 or more cards with the same power, there is no winner\n  if (occurenceMap[highestPower] > 1) {\n    return -1;\n  } else {\n    return cardPowers.indexOf(Math.max(...cardPowers));\n  }\n};\n\nexport const getStandardCardAttributes = (card, turnMode) => {\n  if (turnMode === turnModeEnum.PEOPLE) {\n    return {\n      power: card.mass,\n      name: card.name,\n      type: turnModeEnum.PEOPLE,\n      additionalInfo: card.birth_year\n    };\n  }\n\n  if (turnMode === turnModeEnum.STARSHIPS) {\n    return {\n      power: card.crew,\n      name: card.name,\n      type: turnModeEnum.STARSHIPS,\n      additionalInfo: card.model\n    };\n  }\n\n  return {};\n};\n\nexport function getRandomTurnMode() {\n  const randomKey = Object.keys(turnModeEnum)[getRandomInt(0, 1)];\n\n  return turnModeEnum[randomKey];\n}\n\nexport function getRandomInt(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nexport function getMapWithArrayElementOccurences(arr) {\n  var counts = {};\n\n  for (var i = 0; i < arr.length; i++) {\n    var num = arr[i];\n    counts[num] = counts[num] ? counts[num] + 1 : 1;\n  }\n\n  return counts;\n}\n","import React from \"react\";\n\nimport { getRandomInt } from \"../util/utility\";\nimport { maxAiProcessingTime, minAiProcessingTime } from \"../util/constants\";\n\nclass AiContainer extends React.Component {\n  componentDidMount() {\n    setTimeout(() => {\n      this.props.action();\n    }, getRandomInt(minAiProcessingTime, maxAiProcessingTime));\n  }\n\n  render() {\n    return this.props.children || null;\n  }\n}\n\nexport default AiContainer;\n","import React from \"react\";\n\nconst GameSettings = ({ numberOfAI, numberOfPlayers, onChange }) => {\n  return (\n    <React.Fragment>\n      <label htmlFor=\"playerNumberDropdown\"> Select number of players </label>\n      <select\n        id=\"playerNumberDropdown\"\n        name=\"numberOfPlayers\"\n        value={numberOfPlayers}\n        onChange={onChange}\n      >\n        <option>0</option>\n        <option>1</option>\n        <option>2</option>\n        <option>3</option>\n        <option>4</option>\n        <option>5</option>\n        <option>6</option>\n      </select>\n      <label htmlFor=\"aiNumberDropdown\"> Select number of bots </label>\n      <select\n        id=\"aiNumberDropdown\"\n        name=\"numberOfAI\"\n        value={numberOfAI}\n        onChange={onChange}\n      >\n        <option>0</option>\n        <option>1</option>\n        <option>2</option>\n        <option>3</option>\n        <option>4</option>\n        <option>5</option>\n        <option>6</option>\n      </select>\n    </React.Fragment>\n  );\n};\n\nexport default GameSettings;\n","import React from \"react\";\n\nconst Score = ({ score }) => {\n  return <h3>{score}</h3>;\n};\n\nexport default Score;\n","import { turnModeEnum } from \"./constants\";\nimport axios from \"axios\";\n\nconst root = \"https://swapi.co/api/\";\n\nconst getRandomPeople = () => {\n  const totalNumberOfPeople = 87;\n  const randomPersonIndex = Math.floor(Math.random() * totalNumberOfPeople) + 1;\n\n  return axios.get(`${root}people/${randomPersonIndex}/`);\n};\n\n// the api for fetching starships sends a valid response only if called with the ship indexes in possibleShipIndexes\nconst getRandomStarship = () => {\n  const possibleShipIndexes = [5, 15, 9, 10, 11, 12, 13, 21, 22, 23];\n\n  const randomStarshipIndex = Math.floor(\n    Math.random() * possibleShipIndexes.length\n  );\n\n  return axios.get(\n    `${root}starships/${possibleShipIndexes[randomStarshipIndex]}/`\n  );\n};\n\nexport function getResources(turnMode) {\n  if (turnMode === turnModeEnum.PEOPLE) {\n    return getRandomPeople();\n  } else if (turnMode === turnModeEnum.STARSHIPS) {\n    return getRandomStarship();\n  }\n}\n\nexport default root;\n","import React, { useState } from \"react\";\n\nimport Card from \"./components/Card\";\nimport CardBack from \"./components/CardBack\";\nimport Button from \"./components/Button\";\nimport AiContainer from \"./components/AiContainer\";\nimport GameSettings from \"./components/GameSettings\";\nimport Score from \"./components/Score\";\nimport {\n  areAllCardsTurned,\n  getInitialGameState,\n  getResetGameStateKeepingScores,\n  getStandardCardAttributes,\n  getWinnerIndex\n} from \"./util/utility\";\nimport { getResources } from \"./util/api\";\n\nconst App = () => {\n  const [gameState, setgameState] = useState(\n    getInitialGameState({ numberOfAI: 0, numberOfPlayers: 0 })\n  );\n\n  const { error, numberOfPlayers, data, turnMode, numberOfAI } = gameState;\n\n  if (error) {\n    return <h1>We should handle errors better...</h1>;\n  }\n\n  const cardAction = index => {\n    getResources(gameState.turnMode)\n      .then(response => {\n        const card = response.data;\n\n        setgameState({\n          ...gameState,\n          data: gameState.data.map((playerData, currIndex) => {\n            return {\n              ...playerData,\n              card: currIndex === index ? card : playerData.card\n            };\n          })\n        });\n      })\n      .catch(err => setgameState({ ...gameState, error: true }));\n  };\n\n  const onDropdownChange = e =>\n    setgameState({\n      ...getInitialGameState({\n        numberOfPlayers: gameState.numberOfPlayers,\n        numberOfAI: gameState.numberOfAI,\n        [e.target.name]: parseInt(e.target.value)\n      })\n    });\n\n  const finishTurn = () => {\n    if (areAllCardsTurned(data, numberOfPlayers, numberOfAI)) {\n      const winnerIndex = getWinnerIndex(data, turnMode);\n\n      setgameState({\n        ...gameState,\n        data: data.map((singlePlayerData, index) => {\n          return {\n            ...singlePlayerData,\n            score:\n              index === winnerIndex\n                ? singlePlayerData.score + 1\n                : singlePlayerData.score\n          };\n        })\n      });\n    }\n  };\n\n  const nextTurnHandler = () => {\n    setgameState(getResetGameStateKeepingScores(gameState));\n  };\n\n  return (\n    <div>\n      <div className=\"cardContainer\">\n        {data.map(({ card, ai, score }, index) => {\n          if (!card) {\n            return ai ? (\n              <div>\n                <AiContainer action={() => cardAction(index)}>\n                  <CardBack />\n                  <Score score={score} />\n                </AiContainer>\n              </div>\n            ) : (\n              <div>\n                <CardBack onClick={() => cardAction(index)} />\n                <Score score={score} />\n              </div>\n            );\n          }\n\n          return (\n            <div>\n              <Card {...getStandardCardAttributes(card, turnMode)} />\n              <Score score={score} />\n            </div>\n          );\n        })}\n      </div>\n\n      <div className=\"dashboardContainer\">\n        <Button onClick={finishTurn}>Finish turn</Button>\n        <Button onClick={nextTurnHandler}>Next Turn</Button>\n        <GameSettings\n          onChange={onDropdownChange}\n          numberOfAI={gameState.numberOfAI}\n          numberOfPlayers={gameState.numberOfPlayers}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}